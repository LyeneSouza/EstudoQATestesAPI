{
	"info": {
		"_postman_id": "b42b2723-37f3-44a5-8c77-0478790b9890",
		"name": "Fake REST API",
		"description": "Coleção criada para testar a Fake REST API.\n\nResultado esperado para todos os testes:\n\n- Tempo de resposta inferior a 5 segundos.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24462390"
	},
	"item": [
		{
			"name": "Activities",
			"item": [
				{
					"name": "Create activities",
					"item": [
						{
							"name": "Create a new activity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 100,\r\n  \"title\": \"New Activity\",\r\n  \"dueDate\": \"2022-12-08T12:10:53.777Z\",\r\n  \"completed\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/{{activities}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{activities}}"
									]
								},
								"description": "Deve criar uma nova atividade com sucesso.\n\nResultados esperados:\n\n- Status Code 200 OK;\n- Body correspondente ao Schema da Activity."
							},
							"response": []
						},
						{
							"name": "Create a new activity without body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{activities}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{activities}}"
									]
								},
								"description": "Não deve permitir criar uma nova atividade sem receber os dados obrigatórios no body de request.\n\nResultados esperados:\n\n- Status Code 415 Unsupported Media Type;\n- \"Unsupported Media Type\" no body de response."
							},
							"response": []
						}
					],
					"description": "Requisições do tipo POST."
				},
				{
					"name": "Get activities",
					"item": [
						{
							"name": "Get all activities",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{activities}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{activities}}"
									]
								},
								"description": "Deve mostrar todas as atividades com sucesso.\n\nResultados esperados:\n\n- Status Code 200 OK;\n- Body correspondente ao Schema da Activity."
							},
							"response": []
						},
						{
							"name": "Get a specific activity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{activities}}/:id",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{activities}}",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "10"
										}
									]
								},
								"description": "Deve mostrar uma atividade específica com sucesso.\n\nResultados esperados:\n\n- Status Code 200 OK;\n- Body correspondente ao Schema da Activity."
							},
							"response": []
						},
						{
							"name": "Get a nonexistent activity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{activities}}/:id",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{activities}}",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "200"
										}
									]
								},
								"description": "Não deve encontrar atividade com id inexistente.\n\nResultados esperados:\n\n- Status Code 404 Not Found;\n- \"Not Found\" no body de response."
							},
							"response": []
						}
					],
					"description": "Requisições do tipo GET.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Change activities",
					"item": [
						{
							"name": "Change a specific activity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 100,\r\n  \"title\": \"Activity Changed\",\r\n  \"dueDate\": \"2022-12-08T12:10:53.777Z\",\r\n  \"completed\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/{{activities}}/:id",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{activities}}",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "100"
										}
									]
								},
								"description": "Deve alterar uma atividade específica com sucesso.\n\nResultados esperados:\n\n- Status Code 200 OK;\n- Body correspondente ao Schema da Activity."
							},
							"response": []
						},
						{
							"name": "Change an activity without body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{activities}}/:id",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{activities}}",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "100"
										}
									]
								},
								"description": "Não deve permitir alterar uma atividade sem receber os dados obrigatórios no body de request.\n\nResultados esperados:\n\n- Status Code 415 Unsupported Media Type;\n- \"Unsupported Media Type\" no body de response."
							},
							"response": []
						}
					],
					"description": "Requisições do tipo PUT."
				},
				{
					"name": "Delete activities",
					"item": [
						{
							"name": "Delete a specific activity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{activities}}/:id",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{activities}}",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "15"
										}
									]
								},
								"description": "Deve deletar uma atividade específica com sucesso.\n\nResultados esperados:\n\n- Status Code 200 OK;\n- Body de response vazio."
							},
							"response": []
						},
						{
							"name": "Delete an activity with invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{activities}}/:id",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{activities}}",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "a"
										}
									]
								},
								"description": "Não deve deletar atividade com id inválido.\n\nResultados esperados:\n\n- Status Code 400 Bad Request;\n- \"One or more validation errors occurred.\" no body de response."
							},
							"response": []
						}
					],
					"description": "Requisições do tipo DELETE."
				}
			],
			"description": "Activity deve conter os campos:\n\n- id;\n- title;\n- dueDate;\n- completed.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"schema\",",
							"    {",
							"    \"id\":\t\"integer($int32)\",",
							"    \"title\":\t\"string\",",
							"    \"nullable\": true,",
							"    \"dueDate\":\t\"string($date-time)\",",
							"    \"completed\":\t\"boolean\"",
							"    }",
							");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Authors",
			"item": [
				{
					"name": "Create authors",
					"item": [
						{
							"name": "Create a new author",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 1000,\r\n  \"idBook\": 1000,\r\n  \"firstName\": \"Name New Author\",\r\n  \"lastName\": \"Last Name New Author\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/{{authors}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{authors}}"
									]
								},
								"description": "Deve criar um novo autor com sucesso.\n\nResultados esperados:\n\n- Status Code 200 OK;\n- Body correspondente ao Schema do Author."
							},
							"response": []
						},
						{
							"name": "Create a new author without body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{authors}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{authors}}"
									]
								},
								"description": "Não deve permitir criar um novo autor sem receber os dados obrigatórios no body de request.\n\nResultados esperados:\n\n- Status Code 415 Unsupported Media Type;\n- \"Unsupported Media Type\" no body de response."
							},
							"response": []
						}
					],
					"description": "Requisições do tipo POST."
				},
				{
					"name": "Get authors",
					"item": [
						{
							"name": "Get all authors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{authors}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{authors}}"
									]
								},
								"description": "Deve mostrar todos os autores com sucesso.\n\nResultados esperados:\n\n- Status Code 200 OK;\n- Body correspondente ao Schema do Author."
							},
							"response": []
						},
						{
							"name": "Get a specific author",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"id_author\", \"10\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{authors}}/{{id_author}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{authors}}",
										"{{id_author}}"
									]
								},
								"description": "Deve mostrar um autor específico com sucesso.\n\nResultados esperados:\n\n- Status Code 200 OK;\n- Body correspondente ao Schema do Author."
							},
							"response": []
						},
						{
							"name": "Get a nonexistent author",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"id_author\", \"5000\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{authors}}/{{id_author}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{authors}}",
										"{{id_author}}"
									]
								},
								"description": "Não deve encontrar autor com id inexistente.\n\nResultados esperados:\n\n- Status Code 404 Not Found;\n- \"Not Found\" no body de response."
							},
							"response": []
						},
						{
							"name": "Get authors of a specific book",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"id_book\", \"100\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{authors}}/authors/books/{{id_book}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{authors}}",
										"authors",
										"books",
										"{{id_book}}"
									]
								},
								"description": "Deve mostrar os autores de um livro específico com sucesso.\n\nResultados esperados:\n\n- Status Code 200 OK;\n- Body correspondente ao Schema do Author."
							},
							"response": []
						}
					],
					"description": "Requisições do tipo GET."
				},
				{
					"name": "Change authors",
					"item": [
						{
							"name": "Change a specific author",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"id_author\", \"1000\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 1000,\r\n  \"idBook\": 1000,\r\n  \"firstName\": \"Name Author Changed\",\r\n  \"lastName\": \"Last Name Author Changed\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/{{authors}}/{{id_author}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{authors}}",
										"{{id_author}}"
									]
								},
								"description": "Deve alterar um autor específico com sucesso.\n\nResultados esperados:\n\n- Status Code 200 OK;\n- Body correspondente ao Schema do Author."
							},
							"response": []
						},
						{
							"name": "Change an author without body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"id_author\", \"1000\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{authors}}/{{id_author}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{authors}}",
										"{{id_author}}"
									]
								},
								"description": "Não deve permitir alterar um autor sem receber os dados obrigatórios no body de request.\n\nResultados esperados:\n\n- Status Code 415 Unsupported Media Type;\n- \"Unsupported Media Type\" no body de response."
							},
							"response": []
						}
					],
					"description": "Requisições do tipo PUT."
				},
				{
					"name": "Delete authors",
					"item": [
						{
							"name": "Delete a specific author",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"id_author\", \"15\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{authors}}/{{id_author}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{authors}}",
										"{{id_author}}"
									]
								},
								"description": "Deve deletar um autor específico com sucesso.\n\nResultados esperados:\n\n- Status Code 200 OK;\n- Body de response vazio."
							},
							"response": []
						},
						{
							"name": "Delete an author with invalid id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"id_author\", \"a\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{authors}}/{{id_author}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{authors}}",
										"{{id_author}}"
									]
								},
								"description": "Não deve deletar autor com id inválido.\n\nResultados esperados:\n\n- Status Code 400 Bad Request;\n- \"One or more validation errors occurred.\" no body de response."
							},
							"response": []
						}
					],
					"description": "Requisições do tipo DELETE."
				}
			],
			"description": "Author deve conter os campos:\n\n- id;\n- idBook;\n- firstName;\n- lastName.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"schema\",",
							"    {",
							"    \"id\":\t\"integer($int32)\",",
							"    \"idBook\":\t\"integer($int32)\",",
							"    \"firstName\": \"string\",",
							"        \"nullable\": true,",
							"    \"lastName\": \"string\",",
							"        \"nullable\": true,",
							"    }",
							");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Books",
			"item": [
				{
					"name": "Create books",
					"item": [
						{
							"name": "Create a new book",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 500,\r\n  \"title\": \"New Title\",\r\n  \"description\": \"New Description\",\r\n  \"pageCount\": 500,\r\n  \"excerpt\": \"An excerpt\",\r\n  \"publishDate\": \"2022-12-08T13:45:14.785Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/{{books}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{books}}"
									]
								},
								"description": "Deve criar um novo livro com sucesso.\n\nResultados esperados:\n\n- Status Code 200 OK;\n- Body correspondente ao Schema do Book."
							},
							"response": []
						},
						{
							"name": "Create a new book without body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{books}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{books}}"
									]
								},
								"description": "Não deve permitir criar um novo livro sem receber os dados obrigatórios no body de request.\n\nResultados esperados:\n\n- Status Code 415 Unsupported Media Type;\n- \"Unsupported Media Type\" no body de response."
							},
							"response": []
						}
					],
					"description": "Requisições do tipo POST."
				},
				{
					"name": "Get books",
					"item": [
						{
							"name": "Get all books",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{books}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{books}}"
									]
								},
								"description": "Deve mostrar todos os livros com sucesso.\n\nResultados esperados:\n\n- Status Code 200 OK;\n- Body correspondente ao Schema do Book."
							},
							"response": []
						},
						{
							"name": "Get a specific book",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"id_book\", \"10\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{books}}/{{id_book}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{books}}",
										"{{id_book}}"
									]
								},
								"description": "Deve mostrar um livro específico com sucesso.\n\nResultados esperados:\n\n- Status Code 200 OK;\n- Body correspondente ao Schema do Book."
							},
							"response": []
						},
						{
							"name": "Get a nonexistent book",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"id_book\", \"1000\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{books}}/{{id_book}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{books}}",
										"{{id_book}}"
									]
								},
								"description": "Não deve encontrar livro com id inexistente.\n\nResultados esperados:\n\n- Status Code 404 Not Found;\n- \"Not Found\" no body de response."
							},
							"response": []
						}
					],
					"description": "Requisições do tipo GET."
				},
				{
					"name": "Change books",
					"item": [
						{
							"name": "Change a specific book",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"id_book\", \"500\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 500,\r\n  \"title\": \"Title Changed\",\r\n  \"description\": \"Description Changed\",\r\n  \"pageCount\": 500,\r\n  \"excerpt\": \"An excerpt changed\",\r\n  \"publishDate\": \"2022-12-08T13:45:14.785Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/{{books}}/{{id_book}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{books}}",
										"{{id_book}}"
									]
								},
								"description": "Deve alterar um livro específico com sucesso.\n\nResultados esperados:\n\n- Status Code 200 OK;\n- Body correspondente ao Schema do Book."
							},
							"response": []
						},
						{
							"name": "Change a book without body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"id_book\", \"500\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{books}}/{{id_book}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{books}}",
										"{{id_book}}"
									]
								},
								"description": "Não deve permitir alterar um livro sem receber os dados obrigatórios no body de request.\n\nResultados esperados:\n\n- Status Code 415 Unsupported Media Type;\n- \"Unsupported Media Type\" no body de response."
							},
							"response": []
						}
					],
					"description": "Requisições do tipo PUT."
				},
				{
					"name": "Delete books",
					"item": [
						{
							"name": "Delete a specific book",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"id_book\", \"15\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{books}}/{{id_book}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{books}}",
										"{{id_book}}"
									]
								},
								"description": "Deve deletar um livro específico com sucesso.\n\nResultados esperados:\n\n- Status Code 200 OK;\n- Body de response vazio."
							},
							"response": []
						},
						{
							"name": "Delete a book with invalid id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"id_book\", \"a\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{books}}/{{id_book}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{books}}",
										"{{id_book}}"
									]
								},
								"description": "Não deve deletar livro com id inválido.\n\nResultados esperados:\n\n- Status Code 400 Bad Request;\n- \"One or more validation errors occurred.\" no body de response."
							},
							"response": []
						}
					],
					"description": "Requisições do tipo DELETE."
				}
			],
			"description": "Book deve conter os campos:\n\n- id;\n- title;\n- description;\n- pageCount;\n- excerpt;\n- publishDate.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"schema\",",
							"    {",
							"    \"id\":\t\"integer($int32)\",",
							"    \"title\":\t\"string\",",
							"        \"nullable\": true,",
							"    \"description\": \"string\",",
							"        \"nullable\": true,",
							"    \"pageCount\": \"integer($int32)\",",
							"    \"excerpt\":\t\"string\",",
							"        \"nullable\": true,",
							"    \"publishDate\": \"string($date-time)\"",
							"    }",
							");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "CoverPhotos",
			"item": [
				{
					"name": "Create cover photos",
					"item": [
						{
							"name": "Create a new cover photo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 1000,\r\n  \"idBook\": 1000,\r\n  \"url\": \"New url\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/{{cover_photos}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{cover_photos}}"
									]
								},
								"description": "Deve criar uma foto de capa com sucesso.\n\nResultados esperados:\n\n- Status Code 200 OK;\n- Body correspondente ao Schema do CoverPhoto."
							},
							"response": []
						},
						{
							"name": "Create a new cover photo without body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{cover_photos}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{cover_photos}}"
									]
								},
								"description": "Não deve permitir criar uma nova foto de capa sem receber os dados obrigatórios no body de request.\n\nResultados esperados:\n\n- Status Code 415 Unsupported Media Type;\n- \"Unsupported Media Type\" no body de response."
							},
							"response": []
						}
					],
					"description": "Requisições do tipo POST."
				},
				{
					"name": "Get cover photos",
					"item": [
						{
							"name": "Get all cover photos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{cover_photos}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{cover_photos}}"
									]
								},
								"description": "Deve mostrar todas as fotos de capa com sucesso.\n\nResultados esperados:\n\n- Status Code 200 OK;\n- Body correspondente ao Schema do CoverPhoto."
							},
							"response": []
						},
						{
							"name": "Get a specific cover photo",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"id_cover_photo\", \"10\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{cover_photos}}/{{id_cover_photo}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{cover_photos}}",
										"{{id_cover_photo}}"
									]
								},
								"description": "Deve mostrar uma foto de capa específica com sucesso.\n\nResultados esperados:\n\n- Status Code 200 OK;\n- Body correspondente ao Schema do CoverPhoto."
							},
							"response": []
						},
						{
							"name": "Get a nonexistent cover photo",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"id_cover_photo\", \"500\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{cover_photos}}/{{id_cover_photo}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{cover_photos}}",
										"{{id_cover_photo}}"
									]
								},
								"description": "Não deve encontrar foto de capa com id inexistente.\n\nResultados esperados:\n\n- Status Code 404 Not Found;\n- \"Not Found\" no body de response."
							},
							"response": []
						},
						{
							"name": "Get cover photo of a specific book",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"id_book\", \"100\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{cover_photos}}/books/covers/{{id_book}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{cover_photos}}",
										"books",
										"covers",
										"{{id_book}}"
									]
								},
								"description": "Deve mostrar a foto de capa de um livro específico com sucesso.\n\nResultados esperados:\n\n- Status Code 200 OK;\n- Body correspondente ao Schema do CoverPhoto."
							},
							"response": []
						}
					],
					"description": "Requisições do tipo GET."
				},
				{
					"name": "Change cover photos",
					"item": [
						{
							"name": "Change a specific cover photo",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"id_cover_photo\", \"1000\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 1000,\r\n  \"idBook\": 1000,\r\n  \"url\": \"Url Changed\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/{{cover_photos}}/{{id_cover_photo}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{cover_photos}}",
										"{{id_cover_photo}}"
									]
								},
								"description": "Deve alterar uma foto de capa específica com sucesso.\n\nResultados esperados:\n\n- Status Code 200 OK;\n- Body correspondente ao Schema do CoverPhoto."
							},
							"response": []
						},
						{
							"name": "Change a cover photo without body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"id_cover_photo\", \"1000\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{cover_photos}}/{{id_cover_photo}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{cover_photos}}",
										"{{id_cover_photo}}"
									]
								},
								"description": "Não deve permitir alterar uma foto de capa sem receber os dados obrigatórios no body de request.\n\nResultados esperados:\n\n- Status Code 415 Unsupported Media Type;\n- \"Unsupported Media Type\" no body de response."
							},
							"response": []
						}
					],
					"description": "Requisições do tipo PUT."
				},
				{
					"name": "Delete cover photos",
					"item": [
						{
							"name": "Delete a specific cover photo",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"id_cover_photo\", \"15\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{cover_photos}}/{{id_cover_photo}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{cover_photos}}",
										"{{id_cover_photo}}"
									]
								},
								"description": "Deve deletar uma foto de capa específica com sucesso.\n\nResultados esperados:\n\n- Status Code 200 OK;\n- Body de response vazio."
							},
							"response": []
						},
						{
							"name": "Delete a cover photo with invalid id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"id_cover_photo\", \"a\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{cover_photos}}/{{id_cover_photo}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{cover_photos}}",
										"{{id_cover_photo}}"
									]
								},
								"description": "Não deve deletar foto de capa com id inválido.\n\nResultados esperados:\n\n- Status Code 400 Bad Request;\n- \"One or more validation errors occurred.\" no body de response."
							},
							"response": []
						}
					],
					"description": "Requisições do tipo DELETE."
				}
			],
			"description": "CoverPhoto deve conter os campos:\n\n- id;\n- idBook;\n- url.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"schema\",",
							"    {",
							"    \"id\":\t\"integer($int32)\",",
							"    \"idBook\":\t\"integer($int32)\",",
							"    \"url\":\t\"string($uri)\",",
							"        \"nullable\": true,",
							"    }",
							");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Create users",
					"item": [
						{
							"name": "Create a new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 100,\r\n  \"userName\": \"New User\",\r\n  \"password\": \"New Password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/{{users}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{users}}"
									]
								},
								"description": "Deve criar um novo usuário com sucesso.\n\nResultados esperados:\n\n- Status Code 200 OK;\n- Body correspondente ao Schema do User."
							},
							"response": []
						},
						{
							"name": "Create a new user without body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{users}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{users}}"
									]
								},
								"description": "Não deve permitir criar um novo usuário sem receber os dados obrigatórios no body de request.\n\nResultados esperados:\n\n- Status Code 415 Unsupported Media Type;\n- \"Unsupported Media Type\" no body de response."
							},
							"response": []
						}
					],
					"description": "Requisições do tipo POST."
				},
				{
					"name": "Get users",
					"item": [
						{
							"name": "Get all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{users}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{users}}"
									]
								},
								"description": "Deve mostrar todos os usuários com sucesso.\n\nResultados esperados:\n\n- Status Code 200 OK;\n- Body correspondente ao Schema do User."
							},
							"response": []
						},
						{
							"name": "Get a specific user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"id_user\", \"5\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{users}}/{{id_user}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{users}}",
										"{{id_user}}"
									]
								},
								"description": "Deve mostrar um usuário específico com sucesso.\n\nResultados esperados:\n\n- Status Code 200 OK;\n- Body correspondente ao Schema do User."
							},
							"response": []
						},
						{
							"name": "Get a nonexistent user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"id_user\", \"20\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{users}}/{{id_user}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{users}}",
										"{{id_user}}"
									]
								},
								"description": "Não deve encontrar usuário com id inexistente.\n\nResultados esperados:\n\n- Status Code 404 Not Found;\n- \"Not Found\" no body de response."
							},
							"response": []
						}
					],
					"description": "Requisições do tipo GET."
				},
				{
					"name": "Change users",
					"item": [
						{
							"name": "Change a specific user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"id_user\", \"100\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 100,\r\n  \"userName\": \"User Changed\",\r\n  \"password\": \"Password Changed\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/{{users}}/{{id_user}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{users}}",
										"{{id_user}}"
									]
								},
								"description": "Deve alterar um usuário específico com sucesso.\n\nResultados esperados:\n\n- Status Code 200 OK;\n- Body correspondente ao Schema do User."
							},
							"response": []
						},
						{
							"name": "Change an user without body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"id_user\", \"100\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{users}}/{{id_user}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{users}}",
										"{{id_user}}"
									]
								},
								"description": "Não deve permitir alterar um usuário sem receber os dados obrigatórios no body de request.\n\nResultados esperados:\n\n- Status Code 415 Unsupported Media Type;\n- \"Unsupported Media Type\" no body de response."
							},
							"response": []
						}
					],
					"description": "Requisições do tipo PUT."
				},
				{
					"name": "Delete users",
					"item": [
						{
							"name": "Delete a specific user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"id_user\", \"10\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{users}}/{{id_user}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{users}}",
										"{{id_user}}"
									]
								},
								"description": "Deve deletar um usuário específico com sucesso.\n\nResultados esperados:\n\n- Status Code 200 OK;\n- Body de response vazio."
							},
							"response": []
						},
						{
							"name": "Delete an user with invalid id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"id_user\", \"a\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url_base}}/{{users}}/{{id_user}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"{{users}}",
										"{{id_user}}"
									]
								},
								"description": "Não deve deletar usuário com id inválido.\n\nResultados esperados:\n\n- Status Code 400 Bad Request;\n- \"One or more validation errors occurred.\" no body de response."
							},
							"response": []
						}
					],
					"description": "Requisições do tipo DELETE."
				}
			],
			"description": "User deve conter os campos:\n\n- id;\n- userName;\n- password.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"schema\",",
							"    {",
							"    \"id\":\t\"integer($int32)\",",
							"    \"userName\":\t\"string\",",
							"        \"nullable\": true,",
							"    \"password\":\t\"string\",",
							"        \"nullable\": true,",
							"    }",
							");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Tempo de resposta inferior a 5 segundos",
					"pm.test(\"Response time is less than 5s\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"// POST request sem passar o body",
					"if (pm.request.method == \"POST\" && pm.info.requestName.includes(\"without\")) {",
					"    pm.test(\"Status code is 415\", function () {",
					"        pm.response.to.have.status(415);",
					"    });",
					"",
					"    pm.test(\"Status code name has string\", function () {",
					"        pm.response.to.have.status(\"Unsupported Media Type\");",
					"    });",
					"",
					"    pm.test(\"Body matches string\", function () {",
					"        pm.expect(pm.response.text()).to.include(\"Unsupported Media Type\");",
					"    });",
					"}",
					"// POST request passando o body corretamente",
					"else if (pm.request.method == \"POST\") {",
					"    pm.test(\"Status code is 200\", function () {",
					"        pm.response.to.have.status(200);",
					"    });",
					"",
					"    pm.test(\"Status code name has string\", function () {",
					"        pm.response.to.have.status(\"OK\");",
					"    });",
					"",
					"    pm.test(\"Schema valid\", function () {",
					"        var jsonData = pm.response.json();",
					"        var schema = pm.variables.get(\"schema\");",
					"        pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
					"    });",
					"}",
					"",
					"// GET request para todos os registros ou para registros especificos",
					"else if (pm.request.method == \"GET\" && ",
					"        (pm.info.requestName.includes(\"all\") || pm.info.requestName.includes(\"specific\"))",
					"    ) {",
					"    pm.test(\"Status code is 200\", function () {",
					"        pm.response.to.have.status(200);",
					"    });",
					"",
					"    pm.test(\"Status code name has string\", function () {",
					"        pm.response.to.have.status(\"OK\");",
					"    });",
					"",
					"    pm.test(\"Schema valid\", function () {",
					"        var jsonData = pm.response.json();",
					"        var schema = pm.variables.get(\"schema\");",
					"        pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
					"    });",
					"}",
					"// GET request com id inexistente",
					"else if (pm.request.method == \"GET\" && pm.info.requestName.includes(\"nonexistent\")) {",
					"    pm.test(\"Status code is 404\", function () {",
					"        pm.response.to.have.status(404);",
					"    });",
					"",
					"    pm.test(\"Status code name has string\", function () {",
					"        pm.response.to.have.status(\"Not Found\");",
					"    });",
					"",
					"    pm.test(\"Body matches string\", function () {",
					"        pm.expect(pm.response.text()).to.include(\"Not Found\");",
					"    });",
					"}",
					"",
					"// PUT request sem passar o body",
					"else if (pm.request.method == \"PUT\" && pm.info.requestName.includes(\"without\")) {",
					"    pm.test(\"Status code is 415\", function () {",
					"        pm.response.to.have.status(415);",
					"    });",
					"",
					"    pm.test(\"Status code name has string\", function () {",
					"        pm.response.to.have.status(\"Unsupported Media Type\");",
					"    });",
					"",
					"    pm.test(\"Body matches string\", function () {",
					"        pm.expect(pm.response.text()).to.include(\"Unsupported Media Type\");",
					"    });",
					"}",
					"// PUT request passando o body corretamente",
					"else if (pm.request.method == \"PUT\") {",
					"    pm.test(\"Status code is 200\", function () {",
					"        pm.response.to.have.status(200);",
					"    });",
					"",
					"    pm.test(\"Status code name has string\", function () {",
					"        pm.response.to.have.status(\"OK\");",
					"    });",
					"",
					"    pm.test(\"Schema valid\", function () {",
					"        var jsonData = pm.response.json();",
					"        var schema = pm.variables.get(\"schema\");",
					"        pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
					"    });",
					"}",
					"",
					"// DELETE request com id invalido",
					"else if (pm.request.method == \"DELETE\" && pm.info.requestName.includes(\"invalid\")) {",
					"    pm.test(\"Status code is 400\", function () {",
					"        pm.response.to.have.status(400);",
					"    });",
					"",
					"    pm.test(\"Status code name has string\", function () {",
					"        pm.response.to.have.status(\"Bad Request\");",
					"    });",
					"",
					"    pm.test(\"Body matches string\", function () {",
					"        pm.expect(pm.response.text()).to.include(\"One or more validation errors occurred.\");",
					"    });",
					"}",
					"// DELETE request com sucesso",
					"else if (pm.request.method == \"DELETE\") {",
					"    pm.test(\"Status code is 200\", function () {",
					"        pm.response.to.have.status(200);",
					"    });",
					"",
					"    pm.test(\"Status code name has string\", function () {",
					"        pm.response.to.have.status(\"OK\");",
					"    });",
					"",
					"    pm.test(\"Body is correct\", function () {",
					"        pm.response.to.have.body(\"\");",
					"    });",
					"}",
					"",
					""
				]
			}
		}
	]
}